Question 1:-Count the number of digits in a number.

Approach 1:-using iteration:-

//count the number of digits in a number.
    int n=123;
    int count=0;
    while(n!=0)
    {
        n=n/10;
        count++;
    }
    cout<<"number of digits in are "<<count;


    /* 
    NOW:-
    n=123.
    step 1)We have declared a while loop in which the condition is until our n is not equal
    to zero,we will go inside that loop.
    step 2:-we will divide the n by 10 until it doesn't become zero.
    step 3:We will increase the count by 1.

    
    so,lets see how its working.
    n=123.

    iteration 1:-we went inside the loop and divided n=123 by 10 and increased the value of count by 1.so,now,our n=12 and count=1.

    iteration 2:-again we checked that our n=12 that means n!=0,so,again we went inside while loop and
    divided n=12 by 10 and again increased the value of count by 1.so,now our n=1 and count=2.
    
    iteration 3:-again we checked that our n=1 that means n!=0,so,again we went inside while loop and
    divided n=1 by 10 and again increased the value of count by 1,so,now our n=0 and count=3.
    
    now,again we tried to went inside loop but our conditon is not satisfied as n has became
    zero.

    so,we won't get inside the loop and print the count,so,we got 3 as an answer because the 
    length of our number is 3. and our count did not increased after 3 because we did not went 
    inside the loop because n has become zero.
    */


Approach 2:- Using recursion:-

int numCount(int n)
{
    if(n==0)
    {
        return n;
    }
    else
    {
        return 1+numCount(n/10);
        /*
        now lets look at the approach:-
        n=123.
        step 1:-we will first check that whether n==0 or not.
        if n==0 then we will return 0 else we will return 1+numCount(n/10);
        
        now,lets understand the workings of 1+numCount(n/10) 

        we will be having the stack of function calls:-
        so,
        1st call in stack will be :- 1+numCount(123/10).
        2nd call in stack will be :- 1+numCount(12/10).
        3rd call in stack will be :- 1+numCount(1/10).

        now,after the third call in stack,our n has became 0,so.
        in 4th call,our n has became 0 so it will return 0 to the 3rd call of stack:-
        so, 1 + numCount(1/10)=0,so,1+0=1.

        Now,this (1+0)=1 will be returned to 2nd call in stack:-

        so, 1 + numCount(12/10)=1(1+0),so 1+1=2.

        now,this (1+1)=2 will be returned to 1st call in stack:-

        so,1 + numCount(123/10)=2(1+1),so, 1+2=3.

        now,as we have reached back to the 1st call,we will return the value(final value after all the 
        addition) in the main functions i.e (1+2) = 3.
        */
    }
}
void solve() 
{
    int val=numCount(123);
    cout<<val<<endl;

}


Approach 3:-Using logarithm:-

void solve() s
{
    int n=123;
    int r=floor(log10(n)+1);
    cout<<r<<endl;
    /*
    we can use log base 10 to count the number of digits of a positive number,the digit count of n will
    be equal to upper bound of log,n base 10. so,log of 123 with base 10 will be equal to 2.08,so floor 
    value of 2.08 +1 will be equal to 3.
    */
}  




---------------------------x-------------------------------------------------x----------------------------




Arithmetic progression:-Arithmetic progression is a series of numbers that decrease or increase by the same amount each time.For example,2 4 6 8 10.........100.

In this sequence,2 is our first term.Our first term is denoted by A.
So, A=2.
Common difference is the difference between the two consecutive number.so,4-2=2.
So,common difference (d) is 2.

So, our second term will be a+d=4.
So, our third term will be a+(3-1)d = a + 2d = 2 + (2 * 2)=6. 

N=5.
 
So, our Nth term will be a+(N-1)d= a + N-1(d)= 2 + (5-1 * 2)=10. 


What will be the sum of n terms?

We can think it in terms of average,so, average of n terms is given by sum of those terms divided by number of terms(n).

Average=sum of n terms/number of terms(n).
So we can say that sum=average * number of terms(n).
Now,average of evenly spaced numbers(AP) is calculated by:-(sum-of-first term + sum-of-last-term)/2.

sum=((sum-of-first term + sum-of-last-term)/2) * n.

So we can write it as :- (a + a + (n-1) * d)*(n/2).Brought 2(from average) outside.

So,again we can write it as :- (2a + (n-1) * d) * (n/2).

-------------------------------------------------x----------------------------x----------------------------

GEOMETRIC PROGRESSION:-A series of numbers in which each is multiplied or divided by a fixed number to produce the next, for example 1, 3, 9, 27, 81

In geometric progression, the ratio(r) can be founded using second_term/frist_term.

So, Nth term in geometric progression will be:- a * (r to the power N-1).

So, the sum of the series will be :- a * (1 - (r to the power N) / (1-r).

-----------------------------x---------------------------------------x--------------------------------------

QUADRATIC EQUATION:-It is an equation that is in the form of :- ax2 + bx + c = 0 and roots of this equation means the values of x for which this equation is satisfied, that means if I take x as alpha, then upon calculation ,the ax2 + bx +c should be equals to 0 then alpha will be the root to this equation.If we have a quadratic equation, then we can have maximum two roots.Now all these depends upon the factors which we call discriminants that is denoted by (D = B2 - 4 * a * c).
Formulla for finding the roots is :- x = (-b ± √ (b2 - 4*a*c)) / 2 * a.
Now,if D is less than zero, we have imaginary roots.
If, D is zero, we have two equal roots.
If, D is greater than zero, we have two distinct roots.

---------------------------------------x--------------------------x-------------

MEAN & MEDIAN:-

MEAN:-The mean is found by adding up all of the given data and dividing by the number of data entries.

Fro example, the mean of 4 ,1 , and 7 is (4+1+7)/3 = 4.

MEDIAN:-The middle number; found by ordering all data points and picking out the one in the middle(or if there are two middle numbers,taking the mean of those two numbers). 


Odd Number of Observations:-If the total number of observation given is odd, then the formula to calculate the median is:

Median = {(n+1)/2}th term,where n is the number of observations

Even Number of Observations:-If the total number of observation is even, then the median formula is:

Median  = [(n/2)th term + {(n/2)+1}th]/2,where n is the number of observations.

-----------------------x-----------------------------x-----------------------
PRIME NUMBERS :- A prime number is a number that is only divisible by 1 and itself.

---------------------------x----------------------------------x---------------------------------------------

FACTORS AND MULTIPLES :- 

All the numbers that divide a number completely I.e without leaving any remainder, are called factors of that number.

For example :- 1,2,3,4,6,8,12,24 are the factors of 24 as 24 is completely divisible by these numbers.and 24 is called a multiple each of these numbers.


LCM :- least common multiple of two or more numbers is the smallest numbers other than zero that's a multiple of those numbers(4,6).

For example :- multiple of 4 :- 4,8,12,16,20,24.....
Multiple of 6 :-6,12,18,24.....

Common multiples are :-  12,24.
Least common multiple :- 12.


HCF :- HCF of the two or more given numbers is the highest number which exactly divides all the numbers (12,16).
For example :- factors of  12 :- 1,2,3,4,6,12.
Factors of 16 :1,2,4,8,16.

Common factors :- 1,2,4.

Highest common factor is :- 4 .


--------------------------------------------x-------------------------------x------------------------------------

FACTORIALS:-Factorial of a positive integer N ,denoted by N!,is the product of all positive integer less than or equal to n.
Factorial of 5 is:- 5*4*3*2*1 = 120. (n * n-1 * n-2 * n-3 * n-4).
Factorial of 0 is 1 :- 0. 

-------------------------------x---------x--------x------------------------------------------------
Permutation and combinations:-

Permutation:-It is defined as an arrangement of r things that can be done out of total n things.

This is denoted by (nPr) which is equals to = n! / (n-r)!

Combinations :- It is defined as selection of r things that can be done out of total n things.

This is denoted by (nCr) which is equals to = n! / ((n – r)! * r!) 

---------------------------------------x----------------------------------------x-------------------------------------------

MODULAR ARITHMETIC:-

In most of the programming competitions, problems are required to answer the result in (10^9 + 7) modulo, the reason for taking this mod is to prevent integer overflows. The remainder obtained after the division operation on two operands is known as modulo operation.Operator for doing modulo operations is (%) percentage.

For example a % b = c which means when a is divided by b it gives the remainder c, 7 % 2 = 1 and 17 % 3 = 2. 

the reason for taking this mod is to prevent integer overflows,the largest integer data type in C or C++ unsigned Long long int which is of 64 bit can handle integers from 0 to 2 to the power 64-1. But in some problems, growth of the output is very high, this high range of unsigned long long int may be insufficient that is where we can use modular arithmetic.


-----------------------------------------------------------------------------------------------------